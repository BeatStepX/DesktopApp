{"version":3,"sources":["../src/main/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { BrowserWindow, globalShortcut, dialog, protocol, app } from 'electron';\r\nimport * as path from 'path';\r\nimport { Test } from './test';\r\n// const path = require('path');\r\nconst browserOptions = {\r\n  width: 1360,\r\n  height: 768,\r\n  title: 'BeatStepX',\r\n  fullscreen: true,\r\n  autoHideMenuBar: true,\r\n  icon: 'icon_128.png',\r\n  // frame: false,\r\n  webPreferences: {\r\n    nodeIntegration: false,\r\n    // allowDisplayingInsecureContent: true,\r\n    // allowRunningInsecureContent: true,\r\n    // webSecurity: false\r\n  }\r\n};\r\nconsole.log(\"Test Console.log\");\r\n\r\nconst basePath = __dirname + '\\\\..\\\\public\\\\';\r\n\r\nclass Main {\r\n  mainWindow: BrowserWindow;\r\n  test: Test;\r\n  constructor() {\r\n    this.test = new Test();\r\n    app.on('ready', this.createWindow.bind(this));\r\n    \r\n    // Quit when all windows are closed.\r\n    app.on('window-all-closed', () => {\r\n      // On OS X it is common for applications and their menu bar\r\n      // to stay active until the user quits explicitly with Cmd + Q\r\n      if (process.platform !== 'darwin') {\r\n        app.quit();\r\n      }\r\n    });\r\n    \r\n    app.on('activate', this.onActive.bind(this));\r\n    \r\n  }\r\n\r\n  onActive() {\r\n    if (this.mainWindow === null) {\r\n      this.createWindow();\r\n    }\r\n  }\r\n\r\n  createWindow () {\r\n    protocol.registerFileProtocol('atom', (request: any, callback: any) => {\r\n      let url = request.url.substr(7);\r\n      url = url === \"\" ? \"index.html\" : url;\r\n      \r\n      const newPath = path.normalize(basePath + url);\r\n\r\n      callback({path: newPath});\r\n    }, (error: any) => {\r\n      if (error) {\r\n        console.error('Failed to register protocol');\r\n      }\r\n    });\r\n    // Create the browser window.\r\n    this.mainWindow = new BrowserWindow(browserOptions);\r\n    this.mainWindow.maximize();\r\n    // mainWindow.setMenu(null);\r\n    const f11 = globalShortcut.register('PrintScreen', () => {\r\n      this.mainWindow.webContents.toggleDevTools();\r\n    });\r\n  \r\n    if (!f11) {\r\n      dialog.showErrorBox('Global Shortcut', 'F11 registration failed.');\r\n    }\r\n    // and load the index.html of the app.\r\n    this.mainWindow.loadURL('atom://');\r\n    \r\n    // Open the DevTools.\r\n    // mainWindow.webContents.openDevTools();\r\n    this.mainWindow.webContents.on('new-window', (event) => {\r\n      event.preventDefault();\r\n    });\r\n    // Emitted when the window is closed.\r\n    this.mainWindow.on('closed', this.onClose.bind(this)); \r\n  }\r\n  private onClose() {\r\n    // Dereference the window object, usually you would store windows\r\n    // in an array if your app supports multi windows, this is the time\r\n    // when you should delete the corresponding element.\r\n    this.mainWindow = null;\r\n  }\r\n}\r\n\r\nconst main = new Main();\r\n"]}